
Hey guys, I just wrapped up building a rag application for a freelance client in a little over a week. And without AI, this whole process could have easily taken over a month. Which is why in today's video, I'm going to be sharing my three-step process and a bunch of tips and tricks on my AI workflow so you can copy me and easily crank out real world AI projects 100 times faster. And the best part about the three-step process I'm going to be sharing today and all the tips and tricks on my AI workflow is that you can easily copy

them to use them on your freelance projects that you're working for your clients or to help you launch your own side projects for your AI applications. So here's everything you're going to be learning in the rest of today's video. First, you're going to see how we can go from a rough idea to a solid game plan that we can use to help build out the rest of our AI application. In part two, you're going to see how we can use this game plan to help us spin up a mockup in just a few minutes using AI tools that

is going to allow us to start getting feedback and iteration on our rough MVP that we created. In part three, you're going to see how we can turn this rough MVP that we spun up into an actual production application. And you're going to see how you can use my AI workflow to easily spin up and create this application. And you're going to learn a bunch of tips and tricks along the way. So, if you're serious about becoming an AI developer who can build and ship AI applications, this is the video for you.

And you're definitely going to want to stay around for this whole video because this one video can easily save you hundreds of hours and completely change the way you go about building AI applications. So, let's go ahead and hop in to phase number one. Oh, and real quick, if you're looking for help on your AI projects, I definitely recommend checking out the free school community I've created just for you guys. We have over 7,000 members. We have weekly free coaching calls and a bunch of free resources, I definitely recommend you

checking out. And also, if you're looking for more help on turning your AI ideas into a real life project and looking to hire someone, definitely check out the link in the description below so I can hop on a call with you and we can see if we can turn your idea into real life. But back to the video. All right, guys. Welcome to phase one where we're going to talk about how to take the rough idea inside of your head or your client's head and how you can take that rough idea and turn it into an actionable plan that you can use in

phase two and phase three when we're building out the MVP and actually building out the application. So, the main gap between a rough idea in your customer's head and this actionable plan really comes down to listing out a bunch of requirements and some loose wireframes of like, okay, here's the pages I'd like to see. Here's a set of functionality that each page can do. Here's how you hop between all the pages. So, that is what I like to call the gap between the initial idea and the actionable plan. And it really comes

down to like the best way I like to think about it is when we're initially thinking of an idea, it's super vague and rough in our head where we're just like, "Oh, I know the application I want to build has some inputs and oh, when it's done, it needs to do this." It really comes usually when people think about ideas, it really just comes down to inputs and outputs. And to start off, when it's all in our head and not on paper, it's just a rough idea. It can do anything. It can be everything. And what

we want to do is convert it over to a solid, concrete, actionable plan that has actual list of specifications of what needs to happen. And this is 10 times more important if we're working with a client cuz not only are we having to get the idea, you know, onto a sheet of paper to where we can look at, but we're having to get it out of their head and onto paper. So getting requirements and wireframes is one of the most important things that you can do when starting to build out AI solutions. Okay, so let's dive into talking about

wireframes and requirements so you can actually see how I do it. So you can just copy my process. Okay, so when I am first building out a application or planning on building an AI application, for example, if I'm trying to build a chat application for a client where they have multiple organizations and each organization was going to have their own custom chat, here's exactly what I like to do. I first like to just map out in Excal, so that's the tool I'm using right here. What I like to do is just

map out all the different pages in a brief highle overview of the functionality on each page. The reason I do it like this is because it's super easy to get tripped up when building applications to make sure your initial idea is perfect. So that's why I like to do wireframes because it forces you not to focus on like beautiful UI and all this stuff and we're actually just focused on core functionality in this initial phase. So just highlevel things like hey you should be able to log in and you'll see the logo. People should

be able to put in their email and click login button. When they log in they're going to go to a chat page. When they're on a chat page they should see their organization ID and then they should be allowed to chat in like a chat GPT functionality. If they're an admin they should have an admin panel where they can go in and have organizations tabs, create new organizations. They can add members in each one of these organizations. And then if this was like a rag chat application, they should be able to upload artifacts and those

artifacts should be able to be assigned to different organizations. So this is the exact process. And I usually go in a little bit more detail in mapping out subpages just so when I if I'm building it for myself, I can go, yeah, if I build that application that's going to have all the core functionality that I want. Second, if I'm building it for a client, it's so important for them to start going, "Yeah, that is actually you've taken my rough idea and you as the professional AI developer, that's

exactly what I want it to do. Thank you for putting my ideas onto wireframe for me so I can say yes, that is exactly what I want." Cool. So once we have this nice looking UI of rough functionality built out, what I like to do is I'm using AI at every chance that I can get. So that's why the next thing I want to do is start to work on a proposal. And a proposal is basically, this is super important if you're building client work, but basically this proposal is going to say like, hey, here's exactly

what we're going to build together. So, this proposal is just going to outline like, oh, you're going to have a web app. They're going to have an admin panel. All the core functionality, you're going to put it in the proposal. And why this works so well is because in step two, what we're going to do is we're going to hop on a call with our clients. And this is a little bit more specific if you're working on a client work, but don't worry, you can actually skip this part if you're just doing an app for yourself. But basically, if

we're hopping on a call with our client, we're going to use a tool called Fathom. What Fathom does is it's an AI video recorder. So, when you're inside of a Zoom chat, what it's going to do is record your entire call. It's going to have summaries. It's going to have the ability to have transcripts, and it's also going to have the ability to where you can chat with your Zoom call. And why this is so important is because we're going to hop on a Zoom call with our potential client and we're going to

say, "Hey, I've mocked up this entire wireframe for you. I've also built out this entire proposal to where I've listed out everything that I'm going to do for you as I work on this project for you. I want to make sure by the end of this call that we both have a highle agreement of yes, that is what I want to build." And this is the more feedback you can give me on the application during this call, the better. So, if you want there to be, you know, more pages, if you want there to be more different,

you know, functionality or features, this is the time to tell me because I just want to know exactly what you're trying to build so I can build it for you. And why this is so beautiful is because we're going to get an entire transcript with all the different features and functionalities that we didn't initially capture. And what's amazing is now what we get to do is go, "All right, AI, here's their transcript and chat GBT, what I would like you to do is take in this transcript plus I'd like you to take in the initial proposal

and I'm going to give you some more updated screenshots using the customer's feedback." And now what we're going to do is generate a requirements document. Now, I know requirements documents are probably the most boring thing on Earth, but this is one of the most important things that you need to do when working on AI projects, especially if you're doing client work. The reason why is because this helps you make sure the customer doesn't constantly add 200 features, but it also helps scope what

version one of the application could be. That way, you and the client are on the same page of going, "Okay, yeah, that is exactly what I would be happy with for version one." because the worst thing you can do is be like, "Okay, I built the app." And the client goes, "No, you're missing 10 things that I thought you were going to build." So, having this requirements document is going to be a godsend and make your life so much easier. Because if the client asks for something else, you can go, "Well, was

it in the requirements document?" No. Okay, cool. I will happily do that, but at an hourly rate and continue to build it for you. The other reason why this is so impactful is when it comes to the actual AI development functionality that we're going to work on later on. What we're going to do to help 10x 100x our development speed is we're eventually going to be able to pass in this requirement document. Don't worry, you're going to see this later on. And this is going to act as our north star. So when we hop into cursor later on,

we're going to be able to pass in this requirements document and basically say like, "Hey AI, build this for me." So you're going to see this later on. I'll show you exactly how I do it in this right here. this all this initial prep, even though it's a bunch of extra work, it's going to save hundreds of hours later on when we hop into phase two and phase three where we start building MVPs and actually coding out the application. So, let's hop over to phase two where you're going to see how we can use all

of this to start cranking out a beautiful MVP to get our client to say, "Yes, that's exactly what I want you to build for me so we get the thumbs up." All right, so welcome to phase two. And in phase two, our whole goal is to build a beautiful mockup that we can start to analyze oursel to say, "Yes, that's the application I want to build." Or to showcase the beautiful mockup to our clients so they can go, "Oh my gosh, you were the best AI developer I've ever worked with. That app looks amazing.

Please build it." So here's exactly how we do it. So what we're trying to do is we after phase one have a ton of initial material that we can work with. We have documents such as our initial proposal, our requirements, we have a drawing, basically a wireframe of the application we're trying to build, and if we're doing client work, we have some recordings. So these are all the existing artifacts that we have. Now, what we want to do at this stage is to start to use an AI builder. In our case, we're going to use Lovable to generate

this beautiful mockup. Now, the key thing that I always like to ask myself when in this phase is I like to remind myself of two key concepts. One, we want to maximize leverage from previous work. So, we've already done a ton of work right here that we can use when generating our beautiful mockup, and you're going to see exactly how to do that in just a second. And I also want to say the main reason why we are doing this before we've even typed a single line of code is because we want to start a feedback loop as soon as possible. And

the main reason why is because coding is expensive. It's expensive for development time because it just takes time and developers are costly and it's becoming easier to write code. However, it's still very costly to make changes. For example, if you're building the application and you're going down a certain path and let's just imagine you're just building, you're just cranking out code, you're not really talking to the client or you haven't fully thought through something and you're building the app for yourself. If

you end up getting to a point and you're like, "Oh my gosh, this is not how I wanted the application to look." Going down a, you know, stopping and going down a different path is just going to take a bunch of time to do. So that's why we want to mock up as much of the application as possible before we write a single line of code so we can go yes that is exactly what I want the application to do. Now I have a you know a green check light for myself or the client to say just proceed and just if you can build the thing you just showed

me I'll be ecstatic. That's exactly what we're trying to do here in phase two. So here's exactly how I just did this for a client and definitely recommend you stealing the process as well. And just a key reminder, what we're going to be doing is making a MVP mockup and we're going to be using Lovable to do it. So, here's exactly what I do and what I just did for a client project. So, I take in all the different documents that I've generated so far. Proposal, requirements, drawings, recording transcripts, everything. And I

continually pass them into a website prompt generator. I created this back on a Lovable video where I show how you can use Lovable to create basically you can use Lovable to make any front end. Lovable is not there yet when it comes to building full stack AI applications, but it's beautiful at creating mockups. So that's why I use Lovable and Lovable has a big problem where you know basically you get to pass in a prompt and it just builds the application from there. But it is crucial that you get

the initial prompt that you pass in to lovable correct. And that's exactly why I built this GPT because it can take in all the inputs and create the perfect prompt to create your website in Lovable. I'll have a link to it down description below so you can just grab this GPT as well. But basically what you're going to do is pass in that huge prompt and it's going to say like I want this style. I want these pages. Here's the functionality for each page. Like it's going to create a monster prompt.

And what it's going to do is create a beautiful website. Now, I'm not going to show you the project I created created actually for the client, but just know I I did this exact same process and it came up with the login page. It came up with the chat page. It came up with the admin pages. It came up with everything. And the reason why this is so important is because now you can basically hop on a second call with the client if you're doing freelance work and click through the entire application. Yes, as we

discussed with Lovable, it's not going to be a functioning app. However, you're going to be able to click through the entire process and say like, "Hey, here's the chat page. Here's the organization pages. Here's everything in the application. Is there any feedback that you would like to incorporate?" So, this is the second time we're allowing them to add in major feedback changes. And ideally, by the end of this mockup phase right here, the the client or yourself, if you're building it for yourself, you're going to go, "That is

perfect. That's exactly what I want to build. Green lights, green flags all around. Please just build exactly what you showed me and I'll be ecstatic. So, the main takeaway I like to think of is Lovable is the best UI UX mockup creator there is. And I'm treating this basically as an employee to help me, you know, create MVPs and mockups for my clients. So, yeah, main things that you're going to do before proceeding to the next step is you just want to make sure that the client is happy with the

color scheme because it's so easy to change inside Lovable. Like, oh, you don't like this black, white, orange style? Let's go red or let's go light mode. Let's go dark mode. Like let's just get all the UI and you know core mapping of the app all done in lovable before we write a single code and let's just make sure they're happy on all the pages. Basically just make sure they're happy with the app you build. And once you're done with this, you're going to have a few key deliverables that you're

ready to do in the next step because the next step is where we get our hands dirty and we start coding with cursor. And I'm going to share a bunch of tips and tricks in phase three. But just know at this point we have a few new important uh basically artifacts. So we have a lovable mockup and behind the scenes lovable is going to have a ton of Tailwind stylings. It's going to have a bunch of components that we can copy and paste over to our real world application. Most importantly though we have the user confirmation going thank

you so much that app is beautiful. Please just build that and I will just hand over the money. So, these are the two most important things that we need before we can proceed to phase number three, where we start to get our hands dirty. Let's hop over to the next one. So, you're going to learn all the core AI tips and tricks I use when it comes to using cursor to crank out AI applications 100 times faster than I used to be able to do. Let's hop over to phase number three. All right, guys. Welcome to phase three, where we're

going to use AI to help us rapidly crank out an application for ourselves or our clients. So, here's exactly what we're going to do in phase three where we're getting our hands dirty. So, quick reminder, up to this point, we have a ton of existing material that we can use to crank out the application. We have an entire lovable application that we've created that has beautiful color schemes. It has all the core pages, a bunch of components. It has a ton of different pieces of code that we can steal when building out our real world

application. More importantly though, we have all the initial documents from the initial client conversations or when working with ourselves such as creating the requirements. We also have the existing wireframe at a high level and some additional material. So what we're trying to do when it comes to cranking out the final application is we still need to use the core concept of maximizing everything that we've done so far to help us crank out the application. Because the normal problem that you run into at this stage is a lot

of developers will go, "Okay, cool. It's time to build the application. I'm going to open up a new cursor project and start from scratch. And that is completely wrong because you're not leveraging any existing material which is going to slow down the process drastically. So here's exactly what I just did and definitely recommend you guys stealing as well. So here's what we want to do. Step one, we want to generate a master plan. Now what we want to do cuz we're trying to at this point use AI at its fullest potential. And

what I mean by that is we're going to use AI at every part of the development process. So here's what I mean. We are going to say all right cursor what I would like to do is generate a master plan that documents everything that we are trying to build inside the application. So here's all the high-level functionality that I would like you to build. Here's what user management should look like. Organization, employee data, here's what all the public pages, here's the authenticated pages. We are going to use

cursor to create this master plan. And the way we do it is we just start a new chat inside a cursor. And we continually pass in all sorts of the initial artifacts that we created, proposals, requirements, some drawings, everything that we've created to generate this master plan. And what we're going to do is save this master plan in a folder in our project called AI docs. And the reason we want to do this is because every time going forward as we're cranking out the AI application, we just want to refer back to this master plan

because the biggest problem that AI developers face is you're constantly stuck in a race where you're going like, okay, I have an idea in my head. I've already talked about it, but now I need to start a new chat with cursor and I'm basically having to start over from scratch. So, this one master plan document basically gets all of the thoughts and ideas and features that you're trying to build your application and puts in one central document that you can continually refer to and add to as you're building out your AI

application. And this one tip right here alone is going to save you countless hours because every time you go to start a new feature like building out the organization management feature where you're creating the schema, you're creating the pages, you can easily just refer back to like, hey, here's exactly what this page needs to do. So this document that you're creating right here is the first thing that I build when working on a new project because I'm going to refer to it in every single chat going forward when it comes to

cranking out my AI application. So once you have this highlevel master plan generated, what I like to do next is I like to break up building out the AI application into a bunch of different tasks. So per task, what I like to do is I go, okay, cursor. Well, it's now time for us to start working on task one, which is going to be like a new feature, a big feature inside the application. So here's the master plan that we were working on creating. And what I would like you to do is use this master plan

and to help me generate a new task. And per task, what I like to do is generate the goal of the task, the highle plan, and then what I like to do is then put in a bunch of tasks. And I'm telling cursor to generate this entire document. I did not write a single line of this. All I did was say, "Hey cursor, here's the master plan. It's time to work on feature number one and make this task document." And what's beautiful about this is this task document is actually has like multiple phases. It has like 12

different tasks in it. And what's amazing is now that I have this task document, I can go, okay, cursor, let's start working on task number one where you're going to start to define a new table. And I can easily see all of the different artifacts and different, you know, properties that the AI is thinking about implementing before it actually does the work. So, this is like the best way that I like to build projects cuz what it feels like is it feels like I have a senior engineer who's reporting

back to me saying, "Hey, I understand exactly what you're trying to do. here's my plan for implementing it. Do I have the green light? And what's amazing is I get to review their plan before they implement it and go, "Yeah, that looks right. Go off and implement task one." And then, you know, scurries off. AI does its work and then it's like, "Okay, I just did everything you asked for. I checked off all the boxes. Everything looks great. Am I good to go to task two?" And you continually leverage the

AI throughout the entire building process. And this works out phenomenal because as your chats get longer sometimes inside of cursor sometimes you run out of like you hit a limit. But what's great is now that we have this master plan if we ever have to start a new chat cuz we hit our context limit we go okay cool well you were on step 10 out of 12. Just continue to refer back to this document and you're good. So this is a cheat code and I definitely recommend every time you start to work on a new major feature inside your

projects to create a new task for it. Once again, save it in AI docs. And then what's beautiful is by the end of the project, you're actually going to have documented the entire process of building the application. You're going to have maybe like 15 different tasks in there, and you're going to be able to look back at any point and refer back to like, oh yeah, I know exactly how I built this application, and I know exactly how I got here. This is amazing for multiple reasons. If you're building

this for yourself, I cannot tell you the number of times you come back to code 2 months later and you're like, why did I do this? and you go, "Oh, I can easily look back in my task document and see like, okay, I remember exactly what I did when I got here." Or if for whatever reason you're on a freelance project, if you have to hand this over to another developer, if for whatever reason it doesn't work out with a client and they, you know, want to go a different direction, hey, no worries. You can

easily pass along everything that you did and they can just refer to this AI documents and it's like you've documented the whole process of building the application. So, cannot recommend this enough. This single, you know, new process right here for creating applications is probably one of the most impactful ways you can use to build real world AI applications. Okay, now let's keep on going. So here's where I want to get into some tips and tricks when it comes to actually coding out the applications. So this is where we're

going to get pretty technical. So in this case, I was building out a rag application for a client. So just quick highle tech stack. I was using Nex.js to build out the front end and back end. I was using superbase for authentication and to handle the database and to handle the vector store. When it comes to creating the database schemas, I use Drizzle OM and then obviously I'm using cursor to build out the application. Okay, so when it comes to using cursor, the only model I use at this point is

Gemini 2.5 Pro. It is the best model in my opinion for software development. I've used all the cloud models, all the OpenAI models, and the best one that I use is Gemini 2.5 Pro. I have the second that this model's come out, I've used it and never have gone back just cuz it's a context window is insane. The its reasoning abilities is insane and its coding capabilities is insane. And in the most recent update to cursor pricing, it's included in the $20 a month. So, you get 500 Gemini 2.5 Pro requests completely included in your $20

a month plan. So, just wanted to point that out because it used to cost 5 cent per request. It was still worth it when it was 5 cent per request. But now that it's, you know, included and you get 500 requests, you are going to speed through your projects and run into way fewer errors just by using this model. It's amazing. If you haven't used it, cannot recommend using it enough. All right. Now, what we want to do is in step two, the next tip when it comes to coding out the project is a lot of people when

using AI models, they'll recognize that like, hey, these models were trained on old data. It keeps trying to do stuff that doesn't work anymore. And or I'm trying to do something very specific in my project and they'll fight the AI and every new chat they create, they'll fight the AI. So, when they're working on task one, they'll get the chat working perfectly. it's, you know, it's humming. They're cranking out code, but when they hop over to a new chat, they're starting over from scratch and they're like, "No, AI, I told you to

stop doing that." Well, the way you go about changing that is every time AI makes a mistake, what I like to do is I like to update cursor rules. So, hey, you're trying to use in this case like trying to use an old method for creating form data. Hey, don't do that. I create a rule for it. Or like, hey, I'm trying to maximize my use of route groups. Please do that. I'm using this version of shad CN. Quit using the old one. So every time AI makes a mistake, I quickly just create a new rule. And what this

does is it minimizes the number of times I have to tell the AI stop. So this one additional change to to your workflow is going to help you crank out code 10 times faster. Okay, let's keep cranking out. So here's my favorite tactic right now that I'm using to crank out code faster than I've ever done in my life. And it definitely feels like I'm entering the matrix when I do this. I'm like one with the codebase. So let me just go ahead and explain exactly what I do. So most people when they're using

cursor, what they do is they start a chat and then they start just like, hey, they work on one task at a time. But what happens is a lot of times it takes forever for the code to load cuz the Gemini models fast, but it's not perfect. It thinks it makes a bunch of like, hm, I could go down this path or this path or this path and it eventually cranks out an answer. usually takes 30 seconds, maybe sometimes 60 depending on the complexity. So, what I like to do when I'm working on a project is I like

to actually open up multiple tabs. So, the first tab is the primary task I'm working on. The second tab is a secondary task, and the third one is just a bunch of quick fixes. So, this is big task, medium task, and a bunch of small changes. And what I'll do is if I'm like waiting in line for process one to finish, I'll just hop over to task two, and then I'll start working on task two. And then if task two is still taking for whatever, I'll just go off and make like some tiny UI changes in chat 3. So at any given time, I'm

cranking through three different chats inside of cursor. It definitely feels a little chaotic when you first try it, but by the end of it, you're going to basically, it's like having your brain working, you know, 3x times faster because you're basically just using AI as much as you possibly can. It feels like a lot of the newer different AI modules, you know, assistance that Gemini is dropping, that Claude's dropping to where they like Jewel, for example, to where you're making requests and you're making PR issues and then

code that basically Juul like the AI assistants going off and writing code. It feels like that, but you're doing it all inside of one cursor, basically one cursor window, and you're just opening up new chats per feature. This one change right here helped me shrink down the amount of time it took to crank out an AI application even using AI in half cuz I was able to get twice the amount of work done in the same sitting cuz I wasn't just sitting around twilling my thumbs waiting for AI to get done. It

was working on you know 2x 3x speed. So cannot recommend this feature enough. And the way you do it is you just continually if you want to open up a new chat window you just hit this little plus button right here and it'll open up a new chat window. So definitely recommend checking it out. I have not seen many other AI developers use this feature, but I cannot recommend it enough. I'm hooked on using this one. It feels chaotic, but trust me, you are going to absolutely love it. Speaking of cursor tips, I'll have a whole second

video coming out next week where I go even deeper into like 10 plus different tricks and tips that I use inside of cursor and I'll demo all of them. So, if you want that, definitely like and subscribe and you'll see that in next week's video. All right, the final major tip and trick that I use, I see maybe 50% of developers that I work with inside my school community use this one, but it basically comes down to leveraging cursor at its full extent. So, most developers only use cursor through this chat functionality. But

what you can do is actually make some inline edits. So, if I'm ever just changing something super super tiny, what I'll do is you just select the line of code and then you hit command K. And what it'll do is it'll open up a quick inline editor. And what you can do is just say like, hey, this is bold. I actually want it to be this color. I want it to be extra large. And I want it to be thin. And instead of me writing out all of that code, you know, I'm just going to have the inline editor make the

change. And it's great because it doesn't clutter up my chats with all these small super super niche changes and I get to just keep cruising out and cranking out applications. So yeah, this is the exact process that I used to crank out a real world AI application for a client. And just as a quick recap, you guys got to see everything today. You got to see how we went from cranking out an idea to a plan by, you know, leveraging wireframes, requirements, and everything else when it comes to, you know, going from a rough idea to a plan.

You guys also got to see my exact process for rapidly creating mock-ups using Lovable and definitely recommend checking out, you know, I have links to all this stuff in the description below. And then finally, you got to see some of the core major ways that I'm leveraging AI to help me code 10 times faster. Everything from generating master plans all the way to generating task per item that I'm working on. And then finally, some tips and tricks on exactly how I'm using Cursor to move super fast inside

of building out real world AI projects. If you have any questions on anything that I just showed, hey, please drop a comment down below or check out my school community. Also, if you have some additional tips or tricks that you're using on your AI workflow that I didn't cover today, hey, we're all learning here. So, I'd love to hear what you're working on, too. Please drop a comment down below, and I'd love to learn what you're doing so we can all get better as one. So, just as a quick reminder, you

guys are now pros at turning ideas into real life projects following the three-step process I just talked about in this video. And you also learned a ton of tips and tricks on using AI to help 100x your workflow on bringing ideas to life. And just as two quick reminders, if you need help on your AI projects, I definitely recommend checking out the free school community that I have down the link in the description below. And if you want additional help to bring your idea to life, you can always click the link in

the description below, shoot me an email, and I'd love to hop on a call with you to see if we can turn your idea into a real life working AI application. But enough of that. I have a ton of other AI related content right here on this channel. Everything from agent development to crew AI to lang chain. You want it, I got it right here. So, I definitely recommend checking out whatever video is popping up right now on the screen. And I cannot wait to see you guys in the next video. See you. Have a great day. Bye.
